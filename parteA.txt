Def Server(ServerIp,ServerPort) :
    //CREO LISTA DE CLEINTES
    clientsList = [(clientIp,clientPort,clientReady)]

    //CREO SOCKET TCP
    master = socket.TCP();
    master.bind(ServerIp,ServerPort);
    server = master.Listen();
    server.settimeout(0); //NO BLOQUEANTE

    //CREO SOCKET UDP
    sktUDP = socket.UDP();
    sktUDP.bind(127.0.0.1,65535);


    while (true)
            client,err = server.accept();
            if (err != "timeout"):
                Thread.new(clientConection,client,clientsList);
            endIf

            datagram,ip,port = sktUDP.receive();
            if (datagram != nil):
                for c in clientsList:
                    if (c.getReady())
                        sktUDP.sendTo(datagram,c.clientIp,c.clientPort);
                    endIf
                endFor
            endIf
    endWhile
    master.close();
EndDef


Def clientConection(client,clientList):
    clientIp,_ = client.getPeer();
    while (true):
    data = "";
        repeat
            buffer,err = client.receive();
            if (err):
                client.close();
            data += buffer
        until (buffer == "")    

        if (data.find("CONECTAR")):
            initPos = String.pos(data,"CONECTAR")+1;
            endPos = String.pos(data, "\n");
            clientPort = String.cut(data,initPos,endPos);
            if (!clientsList.find(clientIp,_,_)): //SI EL IP YA ESTA EN LA LISTA NO LO AGREGO
                clientList.add((clientIp,clientsPort,true));
            endIf
        endif

        if (data.find("DESCONECTAR")): //LO SACO DE LA LISTA Y CORTO LA CONEXION TCP
            if (clientsList.find(clientIp,_,_)):
                clientList.remove((clientIp,_,_));
            endIf

            message = "OK\n"
            repeat
                remain, err = client.send(message);
                message = remain;
            until (message = "")

            client.close();
            break;
        endIf    

        if data.find("INTERRUMPIR"): //LO PONGO EN FALSE EN LA LISTA PARA QUE NO TRANSMITA
            if (clientsList.find(clientIp,_,_)):
               clientList.modify((clientIp,_,false));
            endIf
        endIf

        if data.find("CONTINUAR"): //LO PONGO EN TRUE EN LA LISTA PARA QUE TRANSMITA
            if (clientsList.find(clientIp,_)):
                clientList.modify((clientIp,_,true));
            endIf
        endIf

        if ((data.find("CONTINUAR") || data.find("DESCONECTAR") || data.find("INTERRUMPIR") || data.find("CONECTAR"))):
            message = "OK\n"
            repeat
                remain, err = client.send(message);
                message = remain;
            until (message = "")
        endIf

    endWhile
endDef;



Def Client(serverIP,serverPort,vlcPort):
    //SOCKET TCP
    master = socket.TCP();
    master.bind(localhost,0);

    //SOCKET UDP
    sktUDP = socket.UDP()

    client, err = master.connect(serverIP, serverPort);
    if (err):
        master.close();
        break;
    endIf

    while (true):
        data = IO.readLn();
        if (data.find("CONECTAR")):
            initPos = String.pos(data,"CONECTAR")+1;
            endPos = String.pos(data, "\n");
            clientPort = String.cut(data,initPos,endPos);
            sktUDP.bind(localhost,clientPort);
        endif
        repeat
            remain,err = client.send(data)
            if (err):
                break;
                client.close();
            endIf
            data = remain
        until (data = "")
        if (data.find("DESCONECTAR")):
            sktUDP.close();
            break;
        endif
    endWhile
endDef

